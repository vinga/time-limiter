plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.jlink' version '3.0.1'
}

group = 'com.apptimer'
version = '1.0.0'
sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    // JavaFX for UI
    implementation 'org.openjfx:javafx-controls:21'
    implementation 'org.openjfx:javafx-fxml:21'

    // System integration
    implementation 'net.java.dev.jna:jna:5.14.0'
    implementation 'net.java.dev.jna:jna-platform:5.14.0'

    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-classic:1.4.14'

    // JSON configuration
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.0'

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testImplementation 'org.mockito:mockito-core:5.8.0'
}

javafx {
    version = '21'
    modules = ['javafx.controls', 'javafx.fxml']
}

application {
    mainClass = 'com.apptimer.AppTimeLimiterMain'
    applicationDefaultJvmArgs = [
        '--add-opens=java.base/java.lang=ALL-UNNAMED',
        '--add-opens=java.desktop/java.awt=ALL-UNNAMED'
    ]
}

test {
    useJUnitPlatform()
}

// Wrapper task configuration
wrapper {
    gradleVersion = '8.5'
    distributionType = Wrapper.DistributionType.BIN
}

// Create executable JAR
jar {
    manifest {
        attributes(
            'Main-Class': 'com.apptimer.AppTimeLimiterMain',
            'Implementation-Title': project.name,
            'Implementation-Version': project.version
        )
    }
}

// Fat JAR with all dependencies
task fatJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest.from jar.manifest
    archiveClassifier = 'all'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

// JLink custom runtime
jlink {
    imageZip = project.file("${buildDir}/distributions/app-time-limiter-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app-time-limiter'
    }
}

// Bootstrap task to help with initial setup
task bootstrap {
    description = 'Bootstrap the project by downloading required dependencies'
    doLast {
        println "Project bootstrap completed!"
        println "If you're missing the gradle wrapper, please:"
        println "1. Install Gradle from https://gradle.org/install/"
        println "2. Run: gradle wrapper"
        println "3. Then you can use: ./gradlew build"
    }
}
